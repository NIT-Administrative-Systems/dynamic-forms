import{_ as o,r as i,o as p,c,a as n,b as s,d as e,e as t}from"./app-FFB5UPsB.js";const l={},r=t('<h1 id="extending" tabindex="-1"><a class="header-anchor" href="#extending"><span>Extending</span></a></h1><p>There are several ways you can extend Dynamic Forms.</p><h2 id="adjusting-global-settings" tabindex="-1"><a class="header-anchor" href="#adjusting-global-settings"><span>Adjusting Global Settings</span></a></h2><p>Dynamic Forms modifies the default settings for most components to disable unsupported features and hides a lot of technical options that end-users would not be able to use.</p><p>These customizations are achieved by hijacking the <code>Formio.builder()</code> &amp; <code>Formio.createForm()</code> methods, applying the Dynamic Forms defaults, and then applying the <code>options</code> parameter.</p><p>All of the defaults are set in <code>resources/js/formio/defaults.js</code>. There are two important parts of this file:</p><ol><li>The <code>global</code> key contains options that are applied to the builder config screens for every component</li><li>The <code>specificFields</code> key contains options applied to one type of component</li></ol><p>You can adjust these settings, at your own risk. Some options are disabled because Dynamic Forms does not support validating them server-side.</p><h2 id="custom-components" tabindex="-1"><a class="header-anchor" href="#custom-components"><span>Custom Components</span></a></h2><p>There are two ways you can add components to the frontend:</p><ol><li>Customizing existing components for the form builder, so they are presented as new components to users</li><li>Writing your own component from scratch &amp; registering it with Formiojs</li></ol><h3 id="customizing-existing-components" tabindex="-1"><a class="header-anchor" href="#customizing-existing-components"><span>Customizing Existing Components</span></a></h3><p>Customizing an existing component can be something like giving your form builder users a Select component with a standard set of options used across your whole application. This component can have standard validation rules, labeling, and help text -- the developer is in control of how much or how little a user can configure it.</p><p>All of the work involved in making this custom component happens in JavaScript. Your Laravel application is not aware that a form is using one of these components. To continue the example above: when a user fills out that form and submits it, Dynamic Forms just sees a typical Select component with values and validation rules.</p>',14),d={href:"https://formio.github.io/formio.js/app/examples/custombuilder.html",target:"_blank",rel:"noopener noreferrer"},u=n("h3",{id:"writing-components-from-scratch",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#writing-components-from-scratch"},[n("span",null,"Writing Components from Scratch")])],-1),m=n("p",null,"Writing a component from scratch gives you complete control over your component's UI, builder config options, and behaviours.",-1),k=n("p",null,"There are two aspects to the custom component: the JavaScript to add your component to Formiojs, and a component in your Laravel application that tells Dynamic Forms how to validate submissions.",-1),v={href:"https://github.com/formio/contrib/tree/master/src/components",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/formio/formio.js/tree/master/src/components",target:"_blank",rel:"noopener noreferrer"},g=t(`<h3 id="registering-with-formiojs" tabindex="-1"><a class="header-anchor" href="#registering-with-formiojs"><span>Registering with Formiojs</span></a></h3><p>You need to tell Formiojs about your component before it will show up in the builder.</p><p>To do this, edit your <code>resources/js/formio/index.js</code> file. You need to import the component &amp; edit form, then locate the comment that says &#39;<em>If you want to load custom code</em>&#39; and perform the registration.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// . . .</span>
<span class="token keyword">import</span> DirectorySearch <span class="token keyword">from</span> <span class="token string">&quot;../directory-search&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> DirectoryEditForm <span class="token keyword">from</span> <span class="token string">&quot;../directory-search/form&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// . . .</span>

<span class="token comment">// -------------------------------------------------------------------------</span>
<span class="token comment">// If you want to load custom code (like additional components), do it here!</span>
<span class="token comment">// -------------------------------------------------------------------------</span>
Formio<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>DirectorySearch<span class="token punctuation">)</span><span class="token punctuation">;</span>
Formio<span class="token punctuation">.</span>Components<span class="token punctuation">.</span>components<span class="token punctuation">.</span>directorySearch<span class="token punctuation">.</span>editForm <span class="token operator">=</span> DirectoryEditForm<span class="token punctuation">;</span>

<span class="token comment">// . . .</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="registering-server-side" tabindex="-1"><a class="header-anchor" href="#registering-server-side"><span>Registering Server-side</span></a></h4><p>Dynamic Form comes with support for most of the components that Formiojs supports.</p><p>If you want to implement a missing component in the server-side validations, or if you&#39;ve written your own Formiojs component, you need to register it with the component registry. The best place to register components is in a service provider&#39;s boot method.</p><p>Here is an example of creating and registering a layout component for tabs.</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// app\\Tabs.php</span>

<span class="token keyword">namespace</span> <span class="token package">App</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Northwestern<span class="token punctuation">\\</span>SysDev<span class="token punctuation">\\</span>DynamicForms<span class="token punctuation">\\</span>Components<span class="token punctuation">\\</span>ComponentInterface</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Northwestern<span class="token punctuation">\\</span>SysDev<span class="token punctuation">\\</span>DynamicForms<span class="token punctuation">\\</span>Components<span class="token punctuation">\\</span>BaseComponent</span>

<span class="token comment">// You can extend BaseComponent for a lot of functionality, or implement </span>
<span class="token comment">// the ComponentInterface if you need to go totally outside the box.</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Tabs</span> <span class="token keyword">extends</span> <span class="token class-name">BaseComponent</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token constant">TYPE</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;tabs&#39;</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">canValidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// app\\Providers\\AppServiceProvider.php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Providers</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Tabs</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>ServiceProvider</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Northwestern<span class="token punctuation">\\</span>SysDev<span class="token punctuation">\\</span>DynamicForms<span class="token punctuation">\\</span>ComponentRegistry</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">AppServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span>
<span class="token punctuation">{</span>
    <span class="token comment">// . . .</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// . . .</span>
        
        <span class="token doc-comment comment">/** <span class="token keyword">@var</span> <span class="token class-name">ComponentRegistry</span> <span class="token parameter">$registry</span> */</span>
        <span class="token variable">$registry</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name static-context">ComponentRegistry</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$registry</span><span class="token operator">-&gt;</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name static-context">Tabs</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="adding-storage-backends" tabindex="-1"><a class="header-anchor" href="#adding-storage-backends"><span>Adding Storage backends</span></a></h2><p>In order to add a storage backend you must create a driver that implements StorageInterface for the backend.</p><p>Form.js supports base64, dropbox, azure, indexeddb, which are all not currently implemented.</p><h3 id="writing-new-backend" tabindex="-1"><a class="header-anchor" href="#writing-new-backend"><span>Writing new backend</span></a></h3><p>There are two aspects to the new backend component: the controller to handle the requests, and a StorageInterface driver in your Laravel application that tells Dynamic Forms how to validate submissions.</p><h3 id="registering-with-formiojs-1" tabindex="-1"><a class="header-anchor" href="#registering-with-formiojs-1"><span>Registering with Formiojs</span></a></h3><p>You need to tell Formiojs about your component before it will be usable by the application.</p><p>To do this, edit your <code>resources/js/formio/defaults.js</code> file and add your backend to globalFileCustomization</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>    <span class="token doc-comment comment">/**
     * Builder dropdown values cannot be modified by overriding defaults.
     *
     * This modifies the File editForm directly &amp; globally, which seems to be
     * the only approach that works.
     *
     * It also modifies the behaviour of the &#39;saveState&#39; additional field, state,
     * which was not possible from the overrides either.
     */</span>
    <span class="token function-variable function">globalFileCustomization</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> editForm <span class="token operator">=</span> Formio<span class="token punctuation">.</span>Components<span class="token punctuation">.</span>components<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">editForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Formio<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span>editForm<span class="token punctuation">.</span>components<span class="token punctuation">,</span> <span class="token string">&#39;storage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>values <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span><span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;S3&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;s3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;Local&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">}</span>
            <span class="token comment">//INSERT NEW BACKEND HERE</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>

        Formio<span class="token punctuation">.</span>Components<span class="token punctuation">.</span>components<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function-variable function">editForm</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> editForm<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="registering-server-side-1" tabindex="-1"><a class="header-anchor" href="#registering-server-side-1"><span>Registering Server-side</span></a></h4><p>Dynamic Form comes with support for S3 and local storage.</p><p>If you want to implement an additional backend you need to register it with the File component registry. The best place to register components is in a service provider&#39;s boot method.</p><p>Here is an example of creating and registering a layout component for tabs.</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// app\\Providers\\AppServiceProvider.php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Providers</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>DropboxDriver</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>ServiceProvider</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Northwestern<span class="token punctuation">\\</span>SysDev<span class="token punctuation">\\</span>DynamicForms<span class="token punctuation">\\</span>FileComponentRegistry</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">AppServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span>
<span class="token punctuation">{</span>
    <span class="token comment">// . . .</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// . . .</span>
        
        <span class="token doc-comment comment">/** <span class="token keyword">@var</span> <span class="token class-name">ComponentRegistry</span> <span class="token parameter">$registry</span> */</span>
        <span class="token variable">$registry</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name static-context">FileComponentRegistry</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$registry</span><span class="token operator">-&gt;</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name static-context">DropboxDriver</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24);function b(f,y){const a=i("ExternalLinkIcon");return p(),c("div",null,[r,n("p",null,[s("Examples of this approach can be found in the "),n("a",d,[s("Formiojs documentation's examples section"),e(a)]),s(".")]),u,m,k,n("p",null,[s("For examples of custom Formiojs components, see the "),n("a",v,[s("formio/contrib repository"),e(a)]),s(", or look to "),n("a",h,[s("the Formiojs components"),e(a)]),s(" for examples.")]),g])}const x=o(l,[["render",b],["__file","extending.html.vue"]]),F=JSON.parse('{"path":"/extending.html","title":"Extending","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Adjusting Global Settings","slug":"adjusting-global-settings","link":"#adjusting-global-settings","children":[]},{"level":2,"title":"Custom Components","slug":"custom-components","link":"#custom-components","children":[{"level":3,"title":"Customizing Existing Components","slug":"customizing-existing-components","link":"#customizing-existing-components","children":[]},{"level":3,"title":"Writing Components from Scratch","slug":"writing-components-from-scratch","link":"#writing-components-from-scratch","children":[]},{"level":3,"title":"Registering with Formiojs","slug":"registering-with-formiojs","link":"#registering-with-formiojs","children":[]}]},{"level":2,"title":"Adding Storage backends","slug":"adding-storage-backends","link":"#adding-storage-backends","children":[{"level":3,"title":"Writing new backend","slug":"writing-new-backend","link":"#writing-new-backend","children":[]},{"level":3,"title":"Registering with Formiojs","slug":"registering-with-formiojs-1","link":"#registering-with-formiojs-1","children":[]}]}],"git":{"updatedTime":1710857654000,"contributors":[{"name":"Nick Evans","email":"nick.evans@northwestern.edu","commits":1}]},"filePathRelative":"extending.md","excerpt":"\\n<p>There are several ways you can extend Dynamic Forms.</p>\\n<h2>Adjusting Global Settings</h2>\\n<p>Dynamic Forms modifies the default settings for most components to disable unsupported features and hides a lot of technical options that end-users would not be able to use.</p>\\n<p>These customizations are achieved by hijacking the <code>Formio.builder()</code> &amp; <code>Formio.createForm()</code> methods, applying the Dynamic Forms defaults, and then applying the <code>options</code> parameter.</p>"}');export{x as comp,F as data};
